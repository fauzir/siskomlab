<?
if (!defined("B_PROLOG_INCLUDED") || B_PROLOG_INCLUDED !== true) die();
/**
 * Bitrix Framework
 * @package bitrix
 * @subpackage sale
 * @copyright 2001-2015 Bitrix
 */

/** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/** This is alfa version of component! Don't use it! */
/** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */


use Bitrix\Main\Localization\Loc;

Loc::loadMessages(__FILE__);

CBitrixComponent::includeComponentClass("bitrix:tasks.base");

class TasksTopmenuComponent extends TasksBaseComponent
{
	private $listState;
	private $listCtrl;

	protected function checkParameters()
	{
		$arParams = &$this->arParams;

//		static::tryParseStringParameter($arParams[ 'SECTION_URL_PREFIX' ], '');
//		static::tryParseStringParameter($arParams[ 'PATH_TO_REPORTS' ], $arParams[ 'SECTION_URL_PREFIX' ] . 'report/');
//		static::tryParseStringParameter($arParams[ 'PATH_TO_DEPARTMENTS' ], $arParams[ 'SECTION_URL_PREFIX' ] . 'departments/');

		static::tryParseStringParameter($arParams[ 'GROUP_ID' ], 0);
		static::tryParseStringParameter($arParams[ 'SHOW_SECTION_PROJECTS' ], 'Y' );
		static::tryParseStringParameter($arParams[ 'SHOW_SECTION_TEMPLATES' ], 'Y' );
		static::tryParseStringParameter($arParams[ 'SHOW_SECTION_REPORTS' ], 'Y' );
		static::tryParseStringParameter($arParams[ 'SHOW_SECTION_MANAGE' ], 'A');

		static::tryParseStringParameter($arParams[ 'MARK_SECTION_PROJECTS' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_ACTIVE_ROLE' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_SECTION_MANAGE' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_SECTION_REPORTS' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_SECTION_EMPLOYEE_PLAN' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_SPECIAL_PRESET' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_SECTION_ALL' ], 'N');
		static::tryParseStringParameter($arParams[ 'MARK_TEMPLATES' ], 'N');

		return parent::checkParameters(); // TODO: Change the autogenerated stub
	}

	protected function doPostAction()
	{
		if($this->arParams['GROUP_ID'] > 0)
		{
			$this->arParams[ 'SHOW_SECTION_PROJECTS' ] = 'N';
			$this->arParams[ 'SHOW_SECTION_TEMPLATES' ] = 'N';
		}

		$this->arParams[ 'SHOW_SECTION_PROJECTS' ] =
			($this->arParams[ 'SHOW_SECTION_PROJECTS' ] == 'Y' && $this->arParams[ 'USER_ID' ] == $this->userId)
				? 'Y' : 'N';


		// Show this section ONLY if given user is head of department
		// and logged in user is admin or given user or manager of given user
		if ($this->arParams[ 'SHOW_SECTION_MANAGE' ] == 'A')
		{
			$this->arParams[ 'SHOW_SECTION_MANAGE' ] = 'N';

			if ($this->isAccessToCounters())
			{
				if (\Bitrix\Tasks\Integration\Intranet\User::isDirector($this->arParams['USER_ID']))
				{
					$this->arParams[ 'SHOW_SECTION_MANAGE' ] = 'Y';
				}
			}
		}
		if ($this->arParams[ 'SHOW_SECTION_MANAGE' ] == 'Y' && $this->arParams[ 'GROUP_ID' ] > 0)
		{
			$this->arParams[ 'SHOW_SECTION_MANAGE' ] = 'N';
		}

		$this->arResult[ 'SECTION_MANAGE_COUNTER' ] = 0;
		if ($this->arParams[ 'SHOW_SECTION_MANAGE' ] == 'Y' && $this->isAccessToCounters())
		{
			if ($arEmployees = \Bitrix\Tasks\Integration\Intranet\User::getSubordinate($this->arParams['USER_ID']))
			{
				foreach ($arEmployees as $employeeId)
				{
					$employeeId = (int)$employeeId;

					$this->arResult[ 'SECTION_MANAGE_COUNTER' ] += CTaskListCtrl::getUserRoleCounterForUser(
							$employeeId,
							CTaskListState::VIEW_ROLE_RESPONSIBLE
						)
						+ CTaskListCtrl::getUserRoleCounterForUser(
							$employeeId,
							CTaskListState::VIEW_ROLE_ACCOMPLICE
						)
						+ CTaskListCtrl::getUserRoleCounterForUser(
							$employeeId,
							CTaskListState::VIEW_ROLE_ORIGINATOR
						)
						+ CTaskListCtrl::getUserRoleCounterForUser(
							$employeeId,
							CTaskListState::VIEW_ROLE_AUDITOR
						);
				}
			}
		}

		$this->arResult[ 'VIEW_STATE' ] = $this->listState->getState();

		return parent::doPostAction(); // TODO: Change the autogenerated stub
	}

	private function isAccessToCounters()
	{
		return ($this->arParams[ 'USER_ID' ] == $this->userId)
			|| \Bitrix\Tasks\Util\User::isAdmin()
			|| CTasksTools::IsPortalB24Admin()
			|| CTasks::IsSubordinate($this->arParams[ 'USER_ID' ], $this->userId);
	}

	protected function doPreAction()
	{
		$this->listState = \CTaskListState::getInstance($this->arParams[ 'USER_ID' ]);
		$this->listCtrl = \CTaskListCtrl::getInstance($this->arParams[ 'USER_ID' ]);

		$this->arResult[ 'ROLES' ] = $this->getRoles();

		return true;
	}

	/**
	 * Get user roles for tasks.
	 * @return array
	 */
	protected function getRoles()
	{
		$roles = array();

		$state = $this->listState->getState();

		$counters = $this->getCounters();

		foreach ($state[ 'ROLES' ] as $roleId => $role)
		{
			$counter = $counterId = 0;

			if (!empty($counters))
			{
				$counter = array_key_exists($roleId, $counters[ 'ROLES' ]) ? $counters[ 'ROLES' ][ $roleId ][ 'TOTAL' ][ 'COUNTER' ] : 0;
				$counterId = array_key_exists($roleId, $counters[ 'ROLES' ]) ? $counters[ 'ROLES' ][ $roleId ][ 'TOTAL' ][ 'COUNTER_ID' ] : 0;
			}

			$roles[ $roleId ] = array(
				'TEXT' => $role[ 'TITLE' ],
				'COUNTER' => $counter,
				'COUNTER_ID' => $counterId,
				'IS_ACTIVE' => $roleId == $state[ 'ROLE_SELECTED' ][ 'CODENAME' ],
				'HREF' => 'F_CANCEL=Y&F_STATE=' . 'sR' . base_convert($role[ 'ID' ], 10, 32),
			);
		}

		return $roles;
	}

	protected function getCounters()
	{
		$counters = array();
		// not in groups
		if ($this->arParams[ 'GROUP_ID' ] > 0)
		{
			return $counters;
		}

		// check rights
		if (!$this->isAccessToCounters())
		{
			return $counters;
		}
		// alright - get counters

		$counters = array(
			'TOTAL' => array(
				'COUNTER' => $this->listCtrl->getMainCounter()
			),
			'ROLES' => array(
				'VIEW_ROLE_RESPONSIBLE' => array(
					'TOTAL' => array(
						'COUNTER' => $this->listCtrl->getUserRoleCounter(\CTaskListState::VIEW_ROLE_RESPONSIBLE),
						'COUNTER_ID' => $this->listCtrl->resolveCounterIdByRoleAndCategory(\CTaskListState::VIEW_ROLE_RESPONSIBLE)
					)
				),
				'VIEW_ROLE_ACCOMPLICE' => array(
					'TOTAL' => array(
						'COUNTER' => $this->listCtrl->getUserRoleCounter(\CTaskListState::VIEW_ROLE_ACCOMPLICE),
						'COUNTER_ID' => $this->listCtrl->resolveCounterIdByRoleAndCategory(\CTaskListState::VIEW_ROLE_ACCOMPLICE)
					)
				),
				'VIEW_ROLE_ORIGINATOR' => array(
					'TOTAL' => array(
						'COUNTER' => $this->listCtrl->getUserRoleCounter(\CTaskListState::VIEW_ROLE_ORIGINATOR),
						'COUNTER_ID' => $this->listCtrl->resolveCounterIdByRoleAndCategory(\CTaskListState::VIEW_ROLE_ORIGINATOR)
					)
				),
				'VIEW_ROLE_AUDITOR' => array(
					'TOTAL' => array(
						'COUNTER' => $this->listCtrl->getUserRoleCounter(\CTaskListState::VIEW_ROLE_AUDITOR),
						'COUNTER_ID' => $this->listCtrl->resolveCounterIdByRoleAndCategory(\CTaskListState::VIEW_ROLE_AUDITOR)
					)
				)
			)
		);

		return $counters;
	}
}